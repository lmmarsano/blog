extends layout.pug
block content
	article
		nav.page-navigation
			h2#table-of-contents Table of Contents
			ul
				li
					a(href='#introduction') Introduction
				li
					a(href='#requirements') Requirements
				li
					a(href='#overview') Overview
				li
					p
						a(href='#setup') Setup
					ul
						li
							p
								a(href='#public-key-infrastructure') Public Key Infrastructure
							ul
								li
									a(href='#about-certificates') About Certificates
								li
									a(href='#objectives') Objectives
								li
									a(href='#preparation') Preparation
								li
									a(href='#certificate-creation') Certificate Creation
								li
									a(href='#inspection') Inspection
								li
									a(href='#storage--distribution') Storage & Distribution
						li
							p
								a(href='#servers') Servers
							ul
								li
									a(href='#certificate-installation') Certificate Installation
								li
									a(href='#service-configuration') Service Configuration
						li
							p
								a(href='#clients') Clients
							ul
								li
									a(href='#certificate-installation-1') Certificate Installation
								li
									a(href='#usage--optimization') Usage & Optimization
				li
					p
						a(href='#troubleshooting') Troubleshooting
					ul
						li
							a(href='#certificates') Certificates
						li
							p
								a(href='#services') Services
							ul
								li
									a(href='#server') Server
								li
									a(href='#client') Client
		h2#introduction Introduction
		p Secure Shell has long offered the Unix community secure, encrypted remote shell sessions with passwordless authentication. PowerShell Remoting offers this, too, though securely achieving it without an Active Directory domain has been elusive due to execrable documentation. This article addresses that.
		h2#requirements Requirements
		p The following is known to work on Windows 10 non-Home editions (Pro, Enterprise, Education) and Windows Server. It will probably work on earlier versions. Not required
		ul
			li Windows Server
			li Active Directory domains
			li Active Directory Certificate Services
		p Computers not joined to domains are fine. Everything needed to generate your own certificates is built-in.
		h2#overview Overview
		p Since 1995, the Unix community has been using public-key cryptography to securely access remote shells across the internet. Public-key cryptography consists of generating key pairs
		ul
			li a public key
			li a private key.
		p Public-key pairs exhibit these properties
		ul
			li computing a complete key pair with either key missing is computationally prohibitive
			li generating a new pair is practical
			li messages encrypted by one key are decrypted by the other.
		p As corollaries, in practice
		ol
			li messages encrypted by the public key can be decrypted exclusively by whomever possesses a private key
			li possession of a private key may be proven by encryption challenges passed by employing the private key.
		p Thus, as long as the private key is kept secret, public key pairs provide
		ol
			li encryption: secret, 1-way communication from the public to the private key owner
			li authentication: reasonable proof of private key possession without revealing the private key.
		p SSH has long used these features to establish secure, passwordless, remote shell sessions. Typically, the only setup needed is for the user to
		ol
			li generate a client key pair
			li install the client public key on a server to which they will remotely connect.
		p Servers are already setup with host key pairs, allowing the user to save the public key. When the user connects from their client to the remote server, the systems
		ol
			li
				p perform mutual authentication
				ol
					li the server uses its host keys to authenticate to the client
					li the client uses the user’s client keys to authenticate to the server.
			li negotiate an encrypted session.
		p If the user enters a password at all, they do so only to decrypt their client keys. Otherwise, no password is needed. Alternatively, key decryption can be unified with logon (ie, single sign-on) or managed with a key agent that reduces password reentry.
		p
			| Achieving secure and passwordless authentication based on public cryptography is possible for PowerShell Remoting through
			a(href='https://msdn.microsoft.com/en-us/library/aa384295.aspx#Client_Certificate-based_Authentication') Client Certificate-based Authentication
			| , though complicated, error-prone, and poorly documented. It requires
		ul
			li X.509 certificates for both the host and client
			li firewall rules permitting remoting over TLS
			li security group changes
			li service activation.
		p X.509 certificates can be produced free with tools built into Windows.
		h2#setup Setup
		h3#public-key-infrastructure Public Key Infrastructure
		h4#about-certificates About Certificates
		p
			| Setup employs
			a(href='https://en.wikipedia.org/wiki/X.509') X.509
			| public key certificates, so understanding them is vital for remediation and success. Systems dependant on certificates require
			em verifiable
			| certificates that are
			em trusted
			| ,
			em valid
			| , and
			em operable
			| .
		p X.509 binds assertions about a public key pair to a public key through a cryptographically signed certificate bearing the assertions and the public key. Assertions include
		ul
			li names for the subject (key owner) and issuer (certificate signer)
			li usage qualifiers
			li validity period
		p These assertions are trusted only if signatures trace back to a trusted source. Trust typically follows a heirarchy. Each certificate bears a signature of an authority, whose certificate also bears a signature. This recursion produces a chain of signatures terminating with a self-signed certificate of a root authority. Ultimately, the verifier either trusts the root or it does not: acceptance descends accordingly. Specifically,
		ul
			li a self-signed certificate is trusted when trust is preset
			li any other certificate is trusted when the signer hasn’t revoked it, and the signer’s certificate is trusted.
		p Moreover, if all certificates in the trusted chain have active validity periods, then they are valid.
		p Finally, if a valid certificate’s usage qualifiers permit all operations a system needs to commit with it, then the certificate is operable.
		h4#objectives Objectives
		p Our certificates will achieve requisites as follows.
		ul
			li
				strong verifiability:
				| on every computer, install all authority certificates of our signature chains; this will be our single root authority certificate.
			li
				strong trust:
				| preset each computer to trust our root authority certificate; we won’t revoke any certificates.
			li
				strong validity:
				| assign our certificates active validity periods.
			li
				strong operability:
				| assign our certificates correct usage qualifiers.
		p For our public key infrastructure, we will create
		ul
			li
				strong as root authority:
				| 1 self-signed certificate
			li
				strong for each computer:
				| 1 web host certificate
			li
				strong for each user:
				| 1 web client certificate
		p The root authority signs all certificates. As sensible security, private keys, especially the root authority’s, should be guarded.
		p
			| Windows manages certificates by scattering them in registry keys presented as Certificate Stores to management consoles (
			code certlm.msc
			| &
			code certmgr.msc
			| ) and PowerShell drives (
			code Cert:
			| ). These certificate stores preset trust and control certificate operations. To each server’s
			em machine
			| certificate stores, we’ll install operatively appropriate certificates.
		ul
			li
				strong root:
				| the self-signed certificate
			li
				strong trusted people:
				| every user’s web client certificate
			li
				strong machine’s personal:
				| the computer’s own web host certificate with private key
		p Each user’s web client certificate with private key may be stored in their profile’s personal user certificate store or on a more secure medium such as a smart card. The root authority’s certificate with private key may be stored in any secure location; its use should be infrequent.
		h4#preparation Preparation
		p
			| To facilitate setup and reduce typing, I’ve prepared a
			a(href='https://gist.github.com/lmmarsano/30bdbf6a6e91bf4d0488f65edc531af1') script
			| and
			a(href='https://www.powershellgallery.com/packages/CustomPKI/') module
			| : the module extends
			code New-SelfSignedCertificate
			| with friendlier parameters to add subject alternative names and extended key usage extensions to certificates. From PowerShell, you’ll need to download the script and run it inline (dot-source it).
		pre
			code.language-powershell.
				Start-BitsTransfer -Source https://gist.githubusercontent.com/lmmarsano/30bdbf6a6e91bf4d0488f65edc531af1/raw/certutil.ps1
				. .\certutil.ps1
		p If the module is missing, the script will offer to install it: please accept and rerun the script inline. Alternatively, you may install the module
		pre
			code.language-powershell Install-Module -Name CustomPKI -Scope CurrentUser -AllowClobber
		p then run the script inline
		pre
			code.language-powershell . .\certutil.ps1
		h4#certificate-creation Certificate Creation
		p
			| Choose a valid period for our certificates. We’ll need 2 dates to provide
			a(href='https://docs.microsoft.com/en-us/powershell/module/pkiclient/new-selfsignedcertificate') New-SelfSignedCertificate
		ul
			li
				strong NotBefore:
				| date & time validity begins
			li
				strong NotAfter:
				| date & time validity ends
		p
			| The provided
			code New-ValidityInterval
			| function returns these dates as a reusable hash object computed from
			code -Start
			| (optional: defaults to today) and
			code -YearsDuration
			| .
		pre
			code.language-powershell $commonArgs = New-ValidityInterval -YearsDuration 10
		ol
			li
				p Root Certificate Authority
				p
					| Choose a name, organization, your
					a(href='https://www.iso.org/obp/ui/#search/code/') 2-letter country code
					| , and run the commands
				pre
					code.language-powershell.
						$rootca = New-RootCACertificate -CommonName CustomRoot -Organization CustomOrg -Country US @commonArgs
						Export-PrivateCertificate -Cert $rootca
						$commonArgs.RootCA = $rootca
				p
					| We set
					code RootCA
					| in
					code $commonArgs
					| to sign all remaining certificates.
			li
				p Server Certificates
				p For each server, create a certificate bearing its hostname and all its domain names.
				pre
					code.language-powershell.
						(-split @'
						host-0
						host-1
						⋮
						host-n
						'@) | % { Export-PrivateCertificate -Remove -Cert (New-ServerCertificate -HostName $_,('{0}.suffix' -f $_),localhost @commonArgs) }
				p
					| For each server
					code host-i
					| , the above creates a certificate listing its domain names
				ul
					li host-i
					li host-i.suffix
					li localhost
				p
					| in the Subject Alternative Name extension, and exports this certificate and private key to the file
					code host-i.p12
					| . Adapt the above to suite your needs.
				ol
					li
						p Hostname Lookup
						pre
							code.language-powershell [System.Net.Dns]::GetHostName()
					li
						p Domain Name Lookup
						p If your network has a fully functioning domain name system, some domain names can be queried by the server’s IP addresses.
						pre
							code.language-powershell.
								PS C:\> Get-NetAdapter

								Name                      InterfaceDescription                    ifIndex Status       LinkSpeed
								----                      --------------------                    ------- ------       ---------
								Ethernet                  Realtek PCIe GBE Family Controller           10 Disconnected     0 bps
								Wi-Fi                     Ralink RT5390R 802.11bgn Wi-Fi Adapter       14 Up             72 Mbps

								PS C:\> Get-NetIPAddress -InterfaceIndex 14 | % { Resolve-DnsName -Name $_.IPAddress } | Select-Object -ExpandProperty NameHost | Sort-Object -Unique
								hostname.suffix
			li
				p Client Certificates
				p
					| For each user, create a certificate bearing all their local usernames on all servers: each username appears as a Subject Alternative Name UPN field consisting of
					em username
					code @localhost
					| .
				pre
					code.language-powershell.
						$client = (-split @'
						user-0
						user-1
						⋮
						user-n
						'@) | % { New-ClientCertificate -User $_ @commonArgs }
						Export-Certificate -Cert $client -Type P7B -FilePath client.p7b
						$client | % { Export-PrivateCertificate -Cert $_ -Remove }
				p
					code New-ClientCertificate
					| adds the suffix and attaches the appropriate field. For users with multiple names, the
					code -User
					| parameter accepts a list. The above bundles all public certificates into a bundle file
					code client.p7b
					| . For each user
					code user-i
					| , it exports their certificate with private key to
					code user-i.pk12
					| . Adapt the above to suit your needs.
				ol
					li Username Lookup
				pre
					code.language-powershell [System.Environment]::UserName
		h4#inspection Inspection
		ol
			li
				p Files
				p Public certificates
				pre
					code.language-powershell certutil -dump file
				p
					| Public certificates with private keys (
					code *.p12
					| )
				pre
					code.language-powershell certutil -v -dump file
			li
				p Stores
				p
					| PowerShell has the
					a(href='https://docs.microsoft.com/powershell/module/microsoft.powershell.security/providers/certificate-provider') Certificate drive
					code Cert:
					| . Browse with usual cmdlets such as
					code Get-ChildItem
					| . Alternatively, open the consoles
					code certlm.msc
					| ,
					code certmgr.msc
					| . Unless you specified otherwise, all certificates were created in your personal store
					code Cert:\CurrentUser\My\
					| .
				pre
					code.language-powershell.
						PS C:\> Get-ChildItem -Path Cert:\CurrentUser\My\

								 PSParentPath: Microsoft.PowerShell.Security\Certificate::CurrentUser\My

						Thumbprint                                Subject
						----------                                -------
						1ABB2AD73583007E9DE803291960146D94AD9A52  CN=CustomRoot, O=CustomOrg, C=US
				p Unfortunately, PowerShell won’t easily show much more information.
				pre
					code.language-powershell.
						PS C:\> Get-Item -Path Cert:\CurrentUser\My\1ABB2AD73583007E9DE803291960146D94AD9A52 | Format-List

						Subject      : CN=CustomRoot, O=CustomOrg, C=US
						Issuer       : CN=CustomRoot, O=CustomOrg, C=US
						Thumbprint   : 1ABB2AD73583007E9DE803291960146D94AD9A52
						FriendlyName : CustomRoot
						NotBefore    : 3/16/2018 12:00:00 AM
						NotAfter     : 3/16/2028 12:00:00 AM
						Extensions   : {System.Security.Cryptography.Oid, System.Security.Cryptography.Oid, System.Security.Cryptography.Oid}
				p
					| The best command for the task is
					code certutil
					| .
				pre
					code.language-powershell.
						PS C:\> certutil.exe -v -user -store my CustomRoot
						my "Personal"
						================ Certificate 3 ================
						X509 Certificate:
						Version: 3
						Serial Number: 4110b8f5b9f11d834c76b4b45db9c714
						Signature Algorithm:
										Algorithm ObjectId: 1.2.840.113549.1.1.11 sha256RSA
										Algorithm Parameters:
										05 00
						Issuer:
										CN=CustomRoot
										O=CustomOrg
										C=US
								Name Hash(sha1): a327ec9763457666fa47eef9e958cbcd04c3e5c7
								Name Hash(md5): edb277917ff4c0363da633ae5b3e0c65

						 NotBefore: 3/16/2018 12:00 AM
						 NotAfter: 3/16/2028 12:00 AM

						Subject:
										CN=CustomRoot
										O=CustomOrg
										C=US
								Name Hash(sha1): a327ec9763457666fa47eef9e958cbcd04c3e5c7
								Name Hash(md5): edb277917ff4c0363da633ae5b3e0c65

						Public Key Algorithm:
										Algorithm ObjectId: 1.2.840.113549.1.1.1 RSA
										Algorithm Parameters:
										05 00
						Public Key Length: 2048 bits
						Public Key: UnusedBits = 0
										0000  30 82 01 0a 02 82 01 01  00 ce 12 c8 a4 26 00 71
										0010  68 1d f7 69 31 27 f4 dc  f4 85 40 56 d8 66 d6 9c
										0020  48 a9 79 5b ee ab 1d 2b  91 fd 62 37 6f c3 f2 a4
										0030  fe 8d e1 2d 4e 2f b8 15  eb 1c 94 e3 30 e8 a0 a4
										0040  66 24 22 0c 1e 76 f0 d4  86 3f 86 c0 fa 3b d4 bd
										0050  76 87 14 23 46 0c 09 aa  81 84 0a d8 e0 82 09 88
										0060  74 67 b5 a6 72 bf 9d b5  c1 6b 5f 2e 1b 03 fa 7e
										0070  47 2d eb c6 99 ef e8 a1  98 3e ff 7e 56 c3 4e 9d
										0080  98 26 c3 8b 53 e3 f9 91  16 11 95 f7 48 bb dd 98
										0090  ad 39 db 99 c0 88 f4 88  1d 76 36 29 99 b0 72 25
										00a0  67 78 0e b6 6e 75 ae 9a  4c 0b ec 5d 6a 6f ca 18
										00b0  01 52 76 05 02 fc 5f b5  e9 1e 96 03 16 5e 78 1c
										00c0  67 b9 a9 7e f9 4a d7 b4  38 e2 0b 01 0f 42 ed c9
										00d0  44 a5 3e 40 55 b5 6f 7f  ec b9 69 f8 12 01 6e 61
										00e0  1e 77 31 f6 2e 5d 72 10  98 c1 91 b2 bf 34 65 b1
										00f0  de 79 b4 2f 8b 50 70 d2  a1 4f d3 81 65 1c 51 a8
										0100  5a 9b b7 a2 c9 47 78 33  59 02 03 01 00 01
						Certificate Extensions: 3
										2.5.29.15: Flags = 1(Critical), Length = 4
										Key Usage
														Certificate Signing, Off-line CRL Signing, CRL Signing (06)

										2.5.29.19: Flags = 1(Critical), Length = 5
										Basic Constraints
														Subject Type=CA
														Path Length Constraint=None

										2.5.29.14: Flags = 0, Length = 16
										Subject Key Identifier
														c2f300d811eba073aeb33a36f882363a3f8ddbf3

						Signature Algorithm:
										Algorithm ObjectId: 1.2.840.113549.1.1.11 sha256RSA
										Algorithm Parameters:
										05 00
						Signature: UnusedBits=0
										0000  ba de 4c 1d 83 12 a6 12  c5 39 a2 ad a5 6d 1a 75
										0010  55 6a 80 9e c0 75 f6 0e  d7 02 f1 26 c1 56 22 94
										0020  ed 5f 66 de ae d5 6b 90  a2 14 3c c1 ae e7 34 d2
										0030  40 f2 39 0f 0e 20 fd 9a  a8 ea 16 e4 c2 c8 3b d7
										0040  58 79 1a bc eb e8 18 14  77 92 35 30 18 11 a6 1f
										0050  6a c5 42 91 f8 22 30 5e  de 4f 18 c0 7a a6 05 fa
										0060  77 d0 db 0a a4 6d d5 95  47 73 de 8b 9a f7 f0 32
										0070  ef 00 3f 44 02 c6 19 43  36 f5 47 22 f7 25 7c 64
										0080  d6 a2 54 d8 d8 f4 16 42  dc 62 7b fd 5a 76 0f fb
										0090  3d 15 74 9b b6 fe 9a 4a  1e 40 9b 19 77 75 57 5c
										00a0  49 9b 8d 2b 29 75 73 e0  19 da e6 39 c0 57 19 9f
										00b0  fa bf c7 74 0a 09 86 d4  07 d3 57 2b 43 21 d8 49
										00c0  e4 19 e9 cb b5 65 00 70  36 d1 3d 6d c2 cc 9f 9d
										00d0  9c e9 45 bf ed a9 15 33  3f 63 38 50 11 05 88 aa
										00e0  02 08 5a 17 f1 c8 54 17  5c d1 ef 65 13 26 a1 70
										00f0  a9 22 46 1b 7f c3 4f 9a  ba 54 bc ad 4c a7 fc 4c
						Signature matches Public Key
						Root Certificate: Subject matches Issuer
						Key Id Hash(rfc-sha1): c2f300d811eba073aeb33a36f882363a3f8ddbf3
						Key Id Hash(sha1): a168d886679e9449a5c7d8aa6f88c3353bd17a4a
						Key Id Hash(bcrypt-sha1): d6ffce5bc269db040f4f438833154a80ef32ddb7
						Key Id Hash(bcrypt-sha256): f014194c5688b3c3221199eb63f9c2cab05142cf909ee7aa3e68a278daa963b3
						Key Id Hash(md5): 918cb8c487e616a3432db7c210c9022f
						Key Id Hash(sha256): 3a08dbdf741fa0c7821b450a2fc555ef034a8bed1890ce5a86571eef373b4fbd
						Key Id Hash(pin-sha256): /eVMx3Nh1QnsPkH6SSFOA7xFI2QhOhpRGo1bRAP1a6E=
						Key Id Hash(pin-sha256-hex): fde54cc77361d509ec3e41fa49214e03bc452364213a1a511a8d5b4403f56ba1
						Cert Hash(md5): 866c58775c60d815d9d65aaeb99dc125
						Cert Hash(sha1): 1abb2ad73583007e9de803291960146d94ad9a52
						Cert Hash(sha256): 7c38d1ae3768637a7a165765bd2cda8f1a1cfa6a7ba8013cfb9263a86d4b6380
						Signature Hash: d79e5b4acddaef149679fcfb7a6093a8213a192a278347b7e6e669215338505c

								CERT_MD5_HASH_PROP_ID(4):
										866c58775c60d815d9d65aaeb99dc125

								CERT_KEY_IDENTIFIER_PROP_ID(20):
										c2f300d811eba073aeb33a36f882363a3f8ddbf3

								CERT_KEY_PROV_INFO_PROP_ID(2):
										Key Container = te-0125d557-d02e-41dc-8476-36f189060ce9
								Unique container name: b59b1bf435f36edf92e0609b0f6826a0_a1b49e9a-fc4c-4d42-a1f8-12bc38b17eb7
										Provider = Microsoft Software Key Storage Provider
										ProviderType = 0
								Flags = 0
										KeySpec = 0 -- XCN_AT_NONE

								CERT_REQUEST_ORIGINATOR_PROP_ID(71):
										localhost

								CERT_FRIENDLY_NAME_PROP_ID(11):
										CustomRoot

								CERT_SHA1_HASH_PROP_ID(3):
										1abb2ad73583007e9de803291960146d94ad9a52

								CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID(25):
										918cb8c487e616a3432db7c210c9022f

								CERT_ACCESS_STATE_PROP_ID(14):
								AccessState = 2
										CERT_ACCESS_STATE_SYSTEM_STORE_FLAG -- 2
				p Here, you can see all the certificate extensions, which is crucial.
			li
				p Correct Certificate Fields & Extensions
				p
					| These samples from
					code certutil
					| exemplify correct certificates. Ensure your certificates feature similar fields and extensions.
			li
				p All Certificates
				pre
					code.language-powershell.
						Issuer:
								CN=CustomRoot
								O=CustomOrg
								C=US
			li
				p Root Certificate Authority
				pre
					code.language-powershell.
						Subject:
								CN=CustomRoot
								O=CustomOrg
								C=US

						Certificate Extensions: 3
								2.5.29.15: Flags = 1(Critical), Length = 4
								Key Usage
										Certificate Signing, Off-line CRL Signing, CRL Signing (06)

								2.5.29.19: Flags = 1(Critical), Length = 5
								Basic Constraints
										Subject Type=CA
										Path Length Constraint=None

								2.5.29.14: Flags = 0, Length = 16
								Subject Key Identifier
										c2f300d811eba073aeb33a36f882363a3f8ddbf3
			li
				p Server
				pre
					code.language-powershell.
						Subject:
								EMPTY (DNS Name=hostname, DNS Name=hostname.suffix, DNS Name=localhost)

						Certificate Extensions: 5
								2.5.29.15: Flags = 1(Critical), Length = 4
								Key Usage
										Digital Signature, Key Encipherment, Key Agreement (a8)

								2.5.29.37: Flags = 0, Length = 16
								Enhanced Key Usage
										Client Authentication (1.3.6.1.5.5.7.3.2)
										Server Authentication (1.3.6.1.5.5.7.3.1)

								2.5.29.17: Flags = 1(Critical), Length = 2a
								Subject Alternative Name
										DNS Name=hostname
										DNS Name=hostname.suffix
										DNS Name=localhost

								2.5.29.35: Flags = 0, Length = 18
								Authority Key Identifier
										KeyID=c2f300d811eba073aeb33a36f882363a3f8ddbf3

								2.5.29.14: Flags = 0, Length = 16
								Subject Key Identifier
										5d0103b188ead67cce4c530655d97167335f8397
			li
				p Client
				pre
					code.language-powershell.
						Subject:
								EMPTY (Other Name:Principal Name=username@localhost)

						Certificate Extensions: 5
								2.5.29.15: Flags = 1(Critical), Length = 4
								Key Usage
										Digital Signature, Key Encipherment, Key Agreement (a8)

								2.5.29.37: Flags = 0, Length = 12
								Enhanced Key Usage
										Any Purpose (2.5.29.37.0)
										Client Authentication (1.3.6.1.5.5.7.3.2)

								2.5.29.17: Flags = 1(Critical), Length = 23
								Subject Alternative Name
										Other Name:
												 Principal Name=username@localhost

								2.5.29.35: Flags = 0, Length = 18
								Authority Key Identifier
										KeyID=c2f300d811eba073aeb33a36f882363a3f8ddbf3

								2.5.29.14: Flags = 0, Length = 16
								Subject Key Identifier
										4f8142f5ebfe096b5dbcd5b561f1cb13f3953069
		h4#storage--distribution Storage & Distribution
		p Your directory should have a collection of certificate files with names derived from those you provided. Filename suffixes indicate contents.
		ul
			li
				strong .cert:
				| public certificate
			li
				strong .p12:
				| private key
			li
				strong .p7b:
				| public certificate bundle
		p Save the root’s private key somewhere secure and optionally delete it from your store.
		pre
			code.language-powershell $rootca | Remove-Item
		p Give each user their private key and a copy of the root public certificate, which they’ll install. Move the remaining files to a secure network share or portable media for installation:
		ul
			li root public certificate
			li server private keys
			li client public certificate bundle
			li certutil.ps1 (optional convenience script)
		h3#servers Servers
		h4#certificate-installation Certificate Installation
		p
			| On each server, install it’s private key and the public certificates. For server
			em host-i
			| , run a PowerShell console as an administrator, and do
		pre
			code.language-powershell.
				. .\certutil.ps1
				$rootca = Import-RootCACertificate -FilePath .\root.cert
				$server = Import-ServerCertificate -FilePath .\host-i.p12
				Import-ClientCertificate -FilePath .\client.p7b
		p This installs certificates and keys to corresponding locations:
		ul
			li
				strong root:
				| Cert:\LocalMachine\Root
			li
				strong server:
				| Cert:\LocalMachine\My
			li
				strong clients:
				| Cert:\LocalMachine\TrustedPeople
		h4#service-configuration Service Configuration
		p While you’re there, enable PowerShell Remoting.
		pre
			code.language-powershell Enable-RemotingSSL -Certificate $server
		p For each user remotely connecting to this server, bind their username and (local or Microsoft Account) password with the authority that signed their certificate.
		pre
			code.language-powershell Set-RemotingSSLUser -Issuer $rootca -User username
		p This command will prompt for their password. Finally, authorize users to connect. You may authorize all authenticated users
		pre
			code.language-powershell Add-RemotingMember -Member 'NT AUTHORITY\Authenticated Users'
		p
			| Alternatively, pass a more specific list of groups and users to the
			code -Member
			| parameter. Some groups are preassigned access:
		pre
			code.language-powershell Get-PSSessionConfiguration
		h3#clients Clients
		h4#certificate-installation-1 Certificate Installation
		p On their client computer, the user installs the root authority certificate (from an administrator console)
		pre
			code.language-powershell.
				. .\certutil.ps1
				Import-RootCACertificate -FilePath .\root.cert
		p
			| The user
			em user-j
			| installs their private key to a smart card or onto their client computer (from their ordinary console)
		pre
			code.language-powershell $client = Import-PfxCertificate -CertStoreLocation Cert:\CurrentUser\My\ -FilePath .\user-j.p12
		h4#usage--optimization Usage & Optimization
		p
			| Remote servers will accept user passwords and client certificates. To authenticate with certificate, an authorized user connecting to server
			em host-i
			| would enter from their client console
		pre
			code.language-powershell Enter-PSSession -ComputerName host-i -CertificateThumbprint $client.Thumbprint
		p To authenticate with password, the user enters
		pre
			code.language-powershell Enter-PSSession -ComputerName host-i
		p
			| A profile script can automate certificate retrieval and set default parameters. I add the following to my profile at
			code $PROFILE.CurrentUserAllHosts
			| :
		pre
			code.language-powershell.
				$ClientCertificate = Get-ChildItem -Path Cert:\CurrentUser\My -Eku 'Client Authentication' `
													 | ? { $_.Verify() -and $_.GetNameInfo([System.Security.Cryptography.X509Certificates.X509NameType]::UpnName, $false) -eq ('{0}@localhost' -f [System.Environment]::UserName) } `
													 | Select-Object -First 1
				if ($ClientCertificate) {
						(-split @'
				Enter
				Connect
				New
				'@) | % {
								$PSDefaultParameterValues['{0}-PSSession:CertificateThumbprint' -f $_] = $ClientCertificate.Thumbprint
						}
				}
		p A user can then run
		pre
			code.language-powershell Enter-PSSession -ComputerName host-i
		p without entering a password: their client certificate is implicitly passed.
		h2#troubleshooting Troubleshooting
		h3#certificates Certificates
		p
			a(href='#inspect-cert') Inspect certificates
			| to check
		ul
			li certificate fields and extensions
			li certificate store locations
		p
			| Perform validation checks with
			code certutil -verifystore
			| : substituting names as appropriate
		pre
			code.language-powershell.
				certutil -verifystore root rootname
				certutil -verifystore my hostname
				certutil -verifystore trustedpeople username@localhost
		p
			| Though
			a(href='https://docs.microsoft.com/dotnet/api/system.security.cryptography.x509certificates.x509certificate2.verify') X509Certificate2.Verify Method
			| exists, it has reported
			code False
			| on my server certificates in a working setup, so treat it skeptically.
		p
			| Finally, check that
			code Cert:\LocalMachine\Root
			| has only self-signed certificates: if
		pre
			code.language-powershell ($certs = Get-ChildItem -Path Cert:\LocalMachine\Root\ | ? { $_.Issuer -ne $_.Subject })
		p turns up any results, then move or delete them.
		pre
			code.language-powershell $certs | Move-Item -Destination Cert:\LocalMachine\CA\
		p
			| In the name of backward compatibility,
			a(href='https://docs.microsoft.com/en-us/windows-server/security/tls/what-s-new-in-tls-ssl-schannel-ssp-overview') Windows’ client authentication protocols are convoluted or poorly explained
			| , and uninformative logs and error messages won’t effectively alert you of issues like this last one.
		h3#services Services
		h4#server Server
		p
			a(href='#service-config')
				code Enable-RemotingSSL
			| configures a number of system areas: service startup, WS-Management, firewall, PowerShell sessions. WinRM should be running and start automatically.
		pre
			code.language-powershell.
				PS C:\> Get-Service -Name WinRM | Format-List -Property Name,StartType,Status

				Name      : WinRM
				StartType : Automatic
				Status    : Running
		p
			code Get-PSSessionConfiguration
			| should list these services and permissions.
		pre
			code.language-powershell.
				PS C:\> Get-PSSessionConfiguration | Format-List -Property Name,Permission

				Name       : microsoft.powershell
				Permission : NT AUTHORITY\INTERACTIVE AccessAllowed, BUILTIN\Administrators AccessAllowed, BUILTIN\Remote Management Users AccessAllowed

				Name       : microsoft.powershell.workflow
				Permission : BUILTIN\Administrators AccessAllowed, BUILTIN\Remote Management Users AccessAllowed

				Name       : microsoft.powershell32
				Permission : NT AUTHORITY\INTERACTIVE AccessAllowed, BUILTIN\Administrators AccessAllowed, BUILTIN\Remote Management Users AccessAllowed
		p Firewall should permit WinRM connections.
		pre
			code.language-powershell.
				PS C:\> Get-NetFirewallRule -DisplayGroup 'Windows Remote Management' | ? { $_.Enabled -eq 'True' } | Format-List -Property Name

				Name : WINRM-HTTP-In-TCP-NoScope
				Name : WINRM-HTTPS-In-TCP-NoScope
		p
			| The
			a(href='https://docs.microsoft.com/powershell/module/microsoft.wsman.management/provider/wsman-provider') WSMan Provider
			| exposes some settings.
		pre
			code.language-powershell Get-ChildItem -Recurse -Path WSMan:\localhost\Service\,WSMan:\localhost\Shell\
		p Verify some key values
		ul
			li
				p remote access enablement
				pre
					code.language-powershell.
						WSManConfig: Microsoft.WSMan.Management\WSMan::localhost\Service

						Type            Name                           SourceOfValue   Value
						----            ----                           -------------   -----
						System.String   AllowRemoteAccess                              true
			li
				p certificate authentication
				pre
					code.language-powershell.
						WSManConfig: Microsoft.WSMan.Management\WSMan::localhost\Service\Auth

						Type            Name                           SourceOfValue   Value
						----            ----                           -------------   -----
						System.String   Certificate                                    true
			li
				p remote shell enablement
				pre
					code.language-powershell.
						WSManConfig: Microsoft.WSMan.Management\WSMan::localhost\Shell

						Type            Name                           SourceOfValue   Value
						----            ----                           -------------   -----
						System.String   AllowRemoteShellAccess                         true
			li
				p an HTTPS listener exists
				pre
					code.language-powershell ($listener = Get-ChildItem -Path WSMan:\localhost\Listener\ | ? { $_.Keys -contains 'Transport=HTTPS' })
				p
					| the output of
					code $listener | Get-ChildItem
					| includes these values
				pre
					code.language-powershell.
						Type            Name                           SourceOfValue   Value
						----            ----                           -------------   -----
						System.String   Address                                        *
						System.String   Transport                                      HTTPS
						System.String   Port                                           5986
						System.String   Hostname
						System.String   Enabled                                        true
						System.String   URLPrefix                                      wsman
				p and a nonempty CertificateThumbprint
				pre
					code.language-powershell.
						System.String   CertificateThumbprint                          B10BF3132772C18EF34B71BEEF969E73CA2FC6E0
				p that matches the server’s own web server certificate
				pre
					code.language-powershell $listener | Get-ChildItem | ? { $_.Name -eq 'CertificateThumbprint' } | % { certutil.exe -store my $_.Value }
			li
				p ClientCertificate entries exist
				pre
					code.language-powershell ($client = Get-ChildItem -Path WSMan:\localhost\ClientCertificate\)
				p
					| Items output by
					code $client | Get-ChildItem
					| include values like these
				pre
					code.language-powershell.
						WSManConfig: Microsoft.WSMan.Management\WSMan::localhost\ClientCertificate\ClientCertificate_1346055972

						Type            Name                           SourceOfValue   Value
						----            ----                           -------------   -----
						System.String   URI                                            *
						System.String   Subject                                        username@localhost
						System.String   Issuer                                         1ABB2AD73583007E9DE803291960146D94AD9A52
						System.String   UserName                                       username
						System.String   Enabled                                        true
						System.String   Password
				p where each Issuer matches a certificate that signs our client certificates.
				pre
					code.language-powershell $client | Get-ChildItem | ? { $_.Name -eq 'Issuer' } | % { certutil.exe -store root $_.Value }
		p Verify the server’s Remote Management Users security group includes all non-administrators accessing this server remotely.
		pre
			code.language-powershell Get-LocalGroupMember -Name 'Remote Management Users'
		h4#client Client
		p
			code Get-ChildItem -Path WSMan:\localhost\Client\Auth\
			| should show the
			code Certificate
			| key set.
		pre
			code.language-powershell.
				Type            Name                           SourceOfValue   Value
				----            ----                           -------------   -----
				System.String   Certificate                                    true
